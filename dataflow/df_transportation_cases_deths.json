{
	"name": "df_transportation_cases_deths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_caes_and_deths",
						"type": "DatasetReference"
					},
					"name": "casesDethsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "lookupcountrys"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sd_processed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "casesAndDethsSink"
				}
			],
			"transformations": [
				{
					"name": "selectOnlyrequiedField"
				},
				{
					"name": "pivotCount"
				},
				{
					"name": "lookupcountry"
				},
				{
					"name": "filterEuropeDatas"
				},
				{
					"name": "selectFprSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     maxColumns: 20000) ~> casesDethsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupcountrys",
				"filterEuropeDatas select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported'+'_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectOnlyrequiedField",
				"selectOnlyrequiedField pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: false) ~> pivotCount",
				"pivotCount, lookupcountrys lookup(pivotCount@country == lookupcountrys@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupcountry",
				"casesDethsSource filter(continent == 'Europe' && not(isNull(country_code))) ~> filterEuropeDatas",
				"lookupcountry select(mapColumn(",
				"          country = pivotCount@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotCount@population,",
				"          cases_count = {confirmed cases_count},",
				"          deaths_count,",
				"          reported_date,",
				"          source",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFprSink",
				"selectFprSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> casesAndDethsSink"
			]
		}
	}
}